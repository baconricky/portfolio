// adds IE focus support for styling input fields
suckerfish(sfFocus,"input");

//Magnolia URL for images and css
var magnoliaDNS = "adev.nctracks.com",
	magnoliaCmsUrl = "http://"+magnoliaDNS+":8180/magnoliaPublic/dms",
	showIdSuffix = "-details";

$(window).load(function()
{
	
	/* ------ THIS CODE CHECKS FOR OUT-OF-DATE MARKUP, REMOVE PRIOR TO RELEASE ------ */
	var oldElements = 0,
		oldElementsMessage = "";
	
	// old column code
	if ($("dt.columnTwo").size())
	{
		oldElements++;
		oldElementsMessage += "\n* The classes 'columnTwo' and 'columnThree' are no longer needed; remove them from all <dt> and <dd> tags";
	}
	// old tab panes
	if ($("#mainContent > div.panes").size())
	{
		oldElements++;
		oldElementsMessage += "\n* Primary tabs now function as regular links and do not need to be enclosed in <div class='panes'>.  Remove this element.";
	}
	// buttons
	if ($("input[type='submit'], input[type='reset'], input[type='button'], button.formBtn").size())
	{
		oldElements++;
		oldElementsMessage += "\n* Buttons should be created with the <button> tag instead of the <input> tag and no longer require the 'formBtn' class.\n Example: <button type='submit' class='submitBtn'>Search</button>";
	}
	// tooltip DIV
	if ($("div.tooltip").size()) 
	{
		oldElements++;
		oldElementsMessage += "\n* <div class='tooltip'> is now generated by JavaScript.  Please remove it from the HTML markup.";
	}
	// return to top icons
	if ($("img.returnTop[width='6']").size())
	{
		oldElements++;
		oldElementsMessage += "\n* The width of the return to top icon has changed from 6 to 12.  Please update the <img> tag.";
	}
	// h6 collapse icons
	if ($("h6 img[src*='collapse']").size())
	{
		oldElements++;
		oldElementsMessage += "\n* The collapse 'plus/minus' icon on the blue header bars is now handled by a CSS background and no longer needs to be included inside the <h6> tag.  Remove the <img>.";
	}
	// pagination
	if ($("ol.pagination").size())
	{
		oldElements++;
		oldElementsMessage += "\n* The pagination style has changed.  Change <div class='numResults'> to <p>, remove the 'pagination' class from the <ol>, and place both elements inside a new <div class='pageResults'>.";
	}
	
	if(oldElements > 0)
		if (oldElementsMessage)
			alert("OUT-OF-DATE PAGE:\n"+oldElementsMessage);
		else
			alert("OUT-OF-DATE PAGE:\n\nThis page contains deprecated markup that needs to be updated.  Please see the Global Change Log on the NCTracks Sandbox or contact the UI Team for more information.");
		
	/* ---------- END OUT-OF-DATE MARKUP CODE ----------- */
		
/* BEGIN INITIALIZATION */
	//Check for CAPS-LOCK when entering password
	//uses "jQuery.fn.caps" at bottom of script
	var stopCheckingCaps = false;
	$(":password").caps(function(caps){
		if (caps) {
			if (!stopCheckingCaps) {
				$parent = $(this).parent();
					$parent.addClass("error");
					$parent.append("<p id='capslock'>CAPS-LOCK is on</p>");
				stopCheckingCaps = true;
			}
		} else {
			$parent = $(this).parent();
				$parent.removeClass("error");
				$("#capslock").remove();
			stopCheckingCaps = false;
		}
	});

	/** HELP link fix to "layer" the modal window over the backup link **/
	var helpPath = "help/Content";
	$("a.help").bind('click', function(e) {
		e.preventDefault(); 
		
		//strip out help/Content from URL
		var helpUrl = $(this).attr('href')
		                     .replace(helpPath, "");
		//console.log("helpUrl: "+ helpUrl + " from " + $(this).attr('href'));
		
		//If link is to default, set as null for help window
		if (helpUrl == "Default.htm" || helpUrl == "help/Default.htm" || helpUrl == "./help/Default.htm" ) {
			helpUrl = null;
		}
		FMCOpenHelp( helpUrl, null, null, null );
	});

	//synced scrolling
	$("#old").scroll(function () { 
		$("#new").scrollTop($("#old").scrollTop());
		$("#new").scrollLeft($("#old").scrollLeft());
	});
	
	$("#new").scroll(function () { 
		$("#old").scrollTop($("#new").scrollTop());
		$("#old").scrollLeft($("#new").scrollLeft());
	});

	// selector constants, assists in minification
	var required = "required",
		requiredIcon = "requiredIcon",
		mainContent = "#mainContent",
		formLegend = "#formLegend",
		tabs = "ul.tabs",
		lastTab = tabs + ":first:not('div.formSection " + tabs + "') li:last",
		hidden = ".hidden",
		hintClass = "formHint",
		hideRequired = "hideRequired",
		fieldIcon = "fieldIcon",
		showDetail = "showDetail",
		hasDetail = "hasDetail",
		hideDetail = ".hideDetail",
		rowDetails = "rowDetails",
		active = "active";

	//trigger to load login page
	$("#login_btn").bind("click", function() {
		window.location = "../../website/login.html";
	});

	// adds a drop shadow absolutely-positioned behind #contentBackground;
	var dropShadow = "<div class='dropShadow' id='tileBtm'><div id='cornerLeft'></div><div id='cornerRight'></div></div>";
	dropShadow += "<div id='dropShadowBox'><div class='dropShadow'><div id='tileLeft'></div><div id='tileRight'></div></div></div>";
	$("#tileBtm").replaceWith(dropShadow);
	
	// construct detail rows for editable table rows with detail drop-downs
	$("tr." + hasDetail, mainContent).each(function()
	{
		var $this = $(this);
		$this.after("<tr class='" + rowDetails + " hidden'><td colspan='" + $this.children("td").length + "'></td></tr>");
	});
	
	// some browsers maintain form values on page refresh, so let's loop through all the dynamic inputs and show/hide them as necessary
	$(":input:not(tr :input)." + showDetail + ", ." + showDetail + " :radio", mainContent)
		.add(":input" + hideDetail + ", " + hideDetail + " :radio", mainContent)
		.each(function()
		{
			$(this).parseElements();
		});
			
	// hide tagged elements initially; done this way for compatibility with screen readers and to maintain functionality when JS is disabled
	$(hidden, mainContent).css("display","none");
	// change the default minus 'collapse' icon to a plus 'expand' icon for all collapsible sections that are hidden initially
	$("div" + hidden + ", fieldset" + hidden, mainContent).prev("h6").addClass("collapsed");
	
	// add rounded corners; IE forces us to wait until after the dynamic elements are shown/hidden or it bugs out
	/*
	DD_roundies.addRule('.rounded', '8px', true);
	DD_roundies.addRule('.roundedTop', '12px 12px 0 0', true);
	DD_roundies.addRule('.roundedRight', '0 8px 8px 0', true);
	DD_roundies.addRule('.roundedLeft', '8px 0 0 8px', true);
	DD_roundies.addRule('.roundedBottom', '0 0 8px 8px', true);
	DD_roundies.addRule('.roundedHelp', '8px 0 8px 8px', true);
	*/
	//var curvyCornersVerbose = false; 
	
	// convert editable table row inputs to plain text
	$("tr.editable :input", mainContent).each(function()
	{
		var $this = $(this),
			spanText = $this.is("select") ? $this.children("option:selected").html() : $this.val();

		$this.before("<span>" + spanText + "</span>");
	});
	
	// add new window icon to off-site links
	$("a[href^='http']", mainContent).after("<img src='"+magnoliaCmsUrl+"/images/icons/new_window.gif' class='offsiteLink' width='12' height='12' alt='off-site link' title='Navigate Away from NCTracks'>");
	
	// add icons for known file types (pdf,doc,txt,xls,etc)
	$("a[href$='doc']", mainContent).after("<img src='"+magnoliaCmsUrl+"/images/icons/page_white_word.png' class='offsiteLink' width='12' height='12' alt='off-site link' title='Microsoft Word file'>");
	$("a[href$='pdf']", mainContent).after("<img src='"+magnoliaCmsUrl+"/images/icons/page_white_acrobat.png' class='offsiteLink' width='12' height='12' alt='off-site link' title='PDF file'>");
	$("a[href$='txt']", mainContent).after("<img src='"+magnoliaCmsUrl+"/images/icons/page_white_text.png' class='offsiteLink' width='12' height='12' alt='off-site link' title='plain text file'>");
	$("a[href$='csv']", mainContent).after("<img src='"+magnoliaCmsUrl+"/images/icons/page_white_text.png' class='offsiteLink' width='12' height='12' alt='off-site link' title='comma separated value text file'>");
	$("a[href$='xls']", mainContent).after("<img src='"+magnoliaCmsUrl+"/images/icons/page_white_excel.png' class='offsiteLink' width='12' height='12' alt='off-site link' title='Microsoft Excel Spreadsheet'>");

	
	// sub-tabs will be JS-driven, regular tabs are separate pages
	$("div.formSection " + tabs, mainContent)
		.tabs("div.panes > div",
		{
			onClick: function()
			{
				resizeShadow();
			}
		})
		.history();
	// tabs don't wrap well, so if there's too many, we'll create next/previous buttons and use the jQuery Tools scrollable plugin
	if($(lastTab)[0])
		if($(lastTab).offset().top > $(tabs + ":first").offset().top)
		{
			// assemble new tab framework and add next/previous buttons
			var scrollableTabs = "<div id='scrollableTabs'><ul class='tabs'>" + $(tabs + ":first").html() + "</ul></div>";
			scrollableTabs = "<div id='tabPrev'><button type='button' class='prev'></button></div>" + scrollableTabs;
			scrollableTabs += "<div id='tabNext'><button type='button' class='next'></button></div>";
			$(tabs + ":first").replaceWith(scrollableTabs);
			$("#scrollableTabs").scrollable(
			{
				size:			1,
				items:			tabs,
				onSeek:			function()
				{
					var $lastTab = $(lastTab),
						$nextBtn = $("button.next","#tabNext"),
						rightEdge = $(mainContent).offset().left + $(mainContent).outerWidth();
						lastTabPos = $lastTab.offset().left + $lastTab.width();
					lastTabPos <= rightEdge ? $nextBtn.hide() : $nextBtn.show();
				},
				onReload:		function()
				{
					this.getConf().speed = 0;
					this
						.seekTo($(tabs + " a").index($("a.current")),0)
						.getConf()
						.speed = 200;
				}
			});
		}

	// clone the required field icon from the legend at the top so we have an accurate path
	var $icon = $("#requiredLegend img")
		.addClass(requiredIcon)
		.clone();
		

	$(":input." + required + ":not(:radio)", mainContent)
		.getLabel()
		.add($("label." + required, mainContent))
		.before($icon);
		
		
		
	/*if (getParentType($("fieldset :radio." + required, mainContent)) == "FIELDSET") {
		$("fieldset :radio." + required, mainContent)
			.closest("fieldset").find("legend")
			.add($("label." + required, mainContent))
			.prepend($icon);
	}
	*/
		
	$(":input.updated:not(:radio)", mainContent)
		.css("background-color","yellow")
		.css("color","red")
		.getLabel()
		.css("font-weight","bold")
		.css("color","red");

	// hide the icons in any optional fieldsets where fields are required if the user chooses to enter
	$("." + hideRequired + " img." + requiredIcon, mainContent).hide();
	
	$("legend." + required, mainContent).find("span:first").prepend($icon);
	$("legend." + required).parent().find(":input").each( function() {
		if (!$(this).hasClass("required")) {
			$(this).addClass("required");
		}
	});

	$("dt." + required + " span:first", mainContent).prepend($icon);
	
	// clone the audit img tag out of the form legend so the relative path is correct
	var $icon = $("img[src$='audit.png']", formLegend)
		.addClass(fieldIcon)
		.clone();
	// insert the audit icon after text inputs and select boxes; after the label of radio buttons and checkboxes
	$(":text.audit, select.audit", mainContent)
		.add($(":checkbox.audit, :radio.audit", mainContent).getLabel())
		.after($icon);
	// append to table cells
	$("td.audit", mainContent).append($icon);
		
	$("img." + fieldIcon, mainContent).wrap("<a href='audit.html' rel='#overlay'></a>");
	
	// add datepicker icon to the right of date fields
	// clone the img tag out of the form legend so the relative path is correct
	var $icon = $("img[src$='calendar.png']", formLegend)
		.addClass(fieldIcon)
		.clone()
		.insertAfter(":input.dateInput", mainContent);
	
	// alternating row color-coding for data tables
	$evenRows = $([]);
	$oddRows = $([]);
	$("tbody", mainContent).each(function()
	{
		var $this = $(this);
		$evenRows = $evenRows.add($this.children("tr:not(.emphasizeRow, ." + rowDetails + "):even").addClass("even"));
		$oddRows = $oddRows.add($this.children("tr:not(.emphasizeRow, ." + rowDetails + "):odd").addClass("odd"));
	});
	
	/* INPUT HINTING AND MASKING */
	// hinting for miscellaneous fields such as site-wide search (read from title attribute)
	$(":input.hint").coolinput(
	{
		blurClass:	hintClass
	});
	
	// don't run this code unless the masking plugin is loaded; remove prior to production
	if(jQuery().mask)
	{
		// date fields
		$(":input.dateInput", mainContent)
			.mask("99/99/9999")
			.coolinput(
			{
				hint:			"mm/dd/yyyy",
				blurClass:		hintClass
			});
		// zip code fields
		$(":input.zip", mainContent)
			.mask("99999?-9999")
			.coolinput(
			{
				hint:			"00000-0000",
				blurClass:		hintClass
			});	
		// SSN fields
		$(":input.ssn", mainContent)
			.mask("999-99-9999")
			.coolinput(
			{
				hint:			"000-00-0000",
				blurClass:		hintClass
			});
		// EIN fields
		$(":input.ein", mainContent)
			.mask("99-9999999")
			.coolinput(
			{
				hint:			"00-0000000",
				blurClass:		hintClass
			});
		// phone number fields
		$(":input.phone", mainContent)
			.mask("(999) 999-9999")
			.coolinput(
			{
				hint:			"(000) 000-0000",
				blurClass:		hintClass
			});
	}
	
	// remove blank options from empty cross-select boxes, they're only there for validation
	$("div.crossSelect option[value='']:only-child", mainContent).remove();
	
	// if a table row contains a link, make the entire row clickable
	$("tr:not(." + showDetail + ", ." + hasDetail + "):has(a), tr:not(." + showDetail + ", ." + hasDetail + "):has(:radio)").each(function()
	{
		var $this = $(this);
		// if the row has more than one link or input, don't make the row clickable
		if($this.find("a,:input").length <= 1)
			$this.addClass("clickable");
	});
	
	//ID, class and tag element that font size is adjustable in this array
	//Put in html or body if you want the font of the entire page adjustable
	$scalableText = $("*:not(form, #pageTitle, #pageTitle *, .tabs, .tabs *)", mainContent);
	
	// scale the drop shadow box if the user resizes the browser window
	$(window).resize(function(){resizeShadow()});
	
	// create tooltip DIV
	$("body").append("<div class='tooltip'></div>");
	
	// handle textareas with maxlength attribute
	$("textarea[maxlength]", mainContent)
		.each(function()
		{
			var $this = $(this);
		 	$this.after("<div class='charRemain'><span>" + $this.attr("maxlength") + "</span> characters remaining</div>");
		})
		.bind('keypress',function()
		{
			var $this = $(this),
				maxlength = $this.attr("maxlength");
			if($this.val().length >= maxlength)
				$this.val($this.val().substring(0,maxlength));
		})
		.bind('keyup',function()
		{
			var $this = $(this),
				maxlength = $this.attr("maxlength"),
				charRemain = maxlength - $this.val().length;
			if (charRemain >= 0)
				$this.next("div.charRemain").children("span").text(maxlength - $this.val().length);
		});
	
	// client-side form validation
	if(jQuery.validator)
	{
		var einErrMsg='Please enter a valid EIN.',
			ssnErrMsg='Please enter a valid SSN.',
			dateErrMsg='Please enter a valid date.',
			alphaErrMsg='Please do not enter numbers',
			alphanumericErrMsg='Please enter only numbers or letters',
			phoneErrMsg='Please enter a valid phone number, including the area code.',
			zipErrMsg='Please enter a valid ZIP code.',
			checkErrMsg="Please check at least one of the available options.";
		jQuery.validator.setDefaults(
		{ 
			debug:			true,
			onclick:		false,
			onkeyup:		false,
			onfocusout: 	false,
			wrapper:        "",
			ignoreTitle:	true,
			focusInvalid:	false,
			ignore:			hidden + " :input, ." + hideRequired + " :input",
			highlight: function(p_element, p_errorClass)
			{
				if (window.debug) {
					alert("required element: "+ p_element.id);
				}
				var $element = $(p_element),
					$highlight = $element.parent(),
					$name = $element.attr("name"),
					$singleQ = $element.closest(".singleQ");
				if($element.hasClass("oneOrMoreCheck")) {
					$highlight = $element
						.closest("dl")
						.prev("div");
				} else if($singleQ[0]) {
					$highlight = $element;
				} else if ($element.is(":radio")) {
					$(":radio[name='"+$name+"']").not(':checked').each( function() { 
						if (getParentType($(this)) == "TD") {
							$(this).getLabel().addClass(p_errorClass);
						}
					});
				}
					
				if(!$highlight.hasClass("crossSelect") && !$element.is(":radio"))
					$highlight.addClass(p_errorClass);
			},
			unhighlight: function(p_element, p_errorClass)
			{
				var $parent = $(p_element).parent();
				$(p_element).getLabel().removeClass(p_errorClass);
				if(!$parent.find("label." + p_errorClass)[0])
					$parent.removeClass(p_errorClass);
			},
			errorPlacement: function(p_error, p_element) 
			{
				var $element = $(p_element),
					$error = $(p_error),
					$closestDL = $element.closest("dl"),
					$singleQ = $element.closest(".singleQ");
				// if we're validating a group of checkboxes, the error needs to go above them, not on each checkbox
				if($element.hasClass("oneOrMoreCheck")) {
					// we only want one error, not one for each checkbox
					if(!$closestDL.prevAll("div")[0]) {
						$error.insertBefore($closestDL).wrap("<div></div>");
					}
				} else if($element.parent("div.crossSelect")[0]) {
					$(p_error).insertBefore($element.parent()).wrap("<div class='error'></div>");
				} else if($singleQ[0]) {
					$error.appendTo($closestDL.find("dt:last-child"));
				} else if($element.is(":radio")) {
					if (getParentType($element) == "TD") {
						$error.insertAfter($element.closest("fieldset").find("legend.required"));
						$(this).getLabel().addClass(p_error);
					} else {
						$error.insertBefore($element).wrap("<div class='error'></div>");
					}
				} else {
					$error.appendTo($element.parent());
				}
				resizeShadow();
			},
			invalidHandler: function()
			{
				$("div.error").remove();
				$("dd.error").removeClass("error");
			},
			submitHandler: function(p_form)
			{
				p_form.submit();
			}
		});
		jQuery.validator.addMethod("required", function(p_value, p_element)
		{
			jQuery.validator.messages.required = "This field is required.";
			// if we're validating a cross-select, we want to check to see if there are any options, not if they're selected
			if($(p_element).parent("div.crossSelect")[0]) {
				return $(p_element).children("option")[0];
			} else if ($(p_element).is(":radio")) {
				$name = $(p_element).attr("name");
				jQuery.validator.messages.required = "Please select one of the options.";
				return $(":input[@name='"+$name+"']:checked").size();
			} else {
				return p_value; 
			}
		}, jQuery.validator.messages.required);
		jQuery.validator.addMethod("alphanumeric", function(p_value, p_element)
		{
			var result = this.optional(p_element);
			return (checkOptional(result) || /[a-zA-Z0-9]/.test(p_value));
		}, alphanumericErrMsg);
		jQuery.validator.addClassRules("numeric", {digits: true});
		jQuery.validator.addMethod("oneOrMoreCheck", function(p_value, p_element)
		{
			return $(p_element).closest("dl").find(":checkbox:checked").length;
		}, checkErrMsg);
		jQuery.validator.addMethod("alpha", function(p_value, p_element)
		{
			var result = this.optional(p_element);
			return (checkOptional(result) || /(\D$)/.test(p_value));
		}, alphaErrMsg);
		jQuery.validator.addMethod("dateInput", function(p_value, p_element) 
		{ 
			var result = this.optional(p_element);
			return (checkOptional(result) || isDate(p_value));
		}, dateErrMsg);
		jQuery.validator.addMethod("ssn", function(p_value, p_element)
		{ 
			var result = this.optional(p_element);
			return (checkOptional(result) || /\d\d\d\-?\d\d\-?\d\d\d\d/.test(p_value)); 
		}, ssnErrMsg);
		jQuery.validator.addMethod("ein", function(p_value, p_element)
		{ 
			var result = this.optional(p_element);
			return (checkOptional(result) || /\d\d\-?\d\d\d\d\d\d\d/.test(p_value)); 
		}, einErrMsg);
		jQuery.validator.addMethod("phone", function(p_value, p_element)
		{
			phone_number = p_value.replace(/\s+/g, ""); 
			var result = this.optional(p_element);
			return (checkOptional(result) || phone_number.length > 9 &&
			phone_number.match(/^(1-?)?(\([2-9]\d{2}\)|[2-9]\d{2})-?[2-9]\d{2}-?\d{4}$/));
		}, phoneErrMsg);
		jQuery.validator.addMethod("zip", function(p_value, p_element)
		{
			if( (p_value.match(/[^\(\)\_\-\/ x]/)!=null) && (!(parseInt(p_value.charAt(6)))) ) p_value=p_value.substring(0,5);
			var reZip = new RegExp(/(^\d{5}$)|(^\d{5}-\d{4}$)/);
			var result = this.optional(p_element);
			return (checkOptional(result) || reZip.test(p_value));
		}, zipErrMsg);
	}

	//check for active editable table row on load, show it's details if they exist
	$("tr.active").each(function() {
		$(this).parseElements();
	});
/* END INITIALIZATION */
	
/* BEGIN EVENTS */
	$(document).click(function(p_event)
	{
		// only execute for left-clicks
		if(p_event.button == 0)
			$(p_event.target).not("select").parseElements();
	});
	
	$(":input", mainContent).bind("focus, blur", function()
	{
		if($(this).val())
			$(this).removeClass(hintClass);
	});
	
	$("select", mainContent).change(function(p_event)
	{
		var $target = $(p_event.target);
		$target.filter("." + showDetail).parseElements();
				
		var $parentFieldset = $target.closest("fieldset");
		// if the user begins to fill out an optional fieldset, display the required icons for that fieldset
		if($parentFieldset.hasClass(hideRequired))
			if($target.val()[0])
				$parentFieldset
					.removeClass(hideRequired)
					.find("img[src$='icon_required.gif']:hidden")
					.css("display","inline");
	});
	
	$("fieldset.hideRequired :input", mainContent).keyup(function()
	{
		if($(this).val()[0])
			$(this)
				.closest("fieldset")
				.removeClass(hideRequired)
				.find("img[src$='icon_required.gif']:hidden")
				.css("display","inline");
	});
	
	// when the user double-clicks an option in a cross-select box, move it to the other box
	$("select[multiple] option", mainContent).live("dblclick",function()
	{
		var $this = $(this),
			$otherBox = $this.parent().siblings("select[multiple]");
		$otherBox
			.append($this)
			.html($otherBox.find("option").sort(sortAlpha));
	});
	
	// basic addition for adding input field values
	$(":input.add", mainContent).keyup(function()
	{
			var sumTotal = 0,
			// get the other class name of the input they were editing
			className = "." + $(this).attr("class").substr(4);
		// loop through all of the inputs greater than 0 in that class and add them together
		$(":input.add", mainContent).each(function()
		{
			sumTotal += Number($(this).val());
		});
		// insert the total into the sum box
		$(":input.sum" + className).val(sumTotal);
	});
	
	// form legend
	$(formLegend + " div").hover(
	function()
	{
		$(formLegend + " ul").slideDown("fast");
	},
	function()
	{
		$(formLegend + " ul").slideUp("fast");
	});
	
	if ($(":input.dateInput", mainContent)) {
		Date.format = 'mm/dd/yyyy';
		$(':input.dateInput', mainContent)
			.datePicker(
			{
				horizontalOffset:	-13,
				verticalOffset:		19,
				startDate:			'02/27/1892',
				clickInput:			true,
				createButton:		false,
				showYearNavigation:	true
			})
			.bind('focus', function(p_event, p_message)
			{
				if (p_message == $.dpConst.DP_INTERNAL_FOCUS)
					return true;
				var dp = this,
					$dp = $(this);
				$dp.dpDisplay();
				$('*').bind('focus.datePicker', function()
				{
					var $focused = $(this);
					if (!$focused.is('.dp-applied')) // don't close the focused date picker if we just opened a new one!
						// if the newly focused element isn't inside the date picker and isn't the original element which triggered
						// the opening of the date picker
						if ($focused.parents('#dp-popup').length == 0 && this != dp && !($.browser.msie && this == document.body))
						{
							$('*').unbind('focus.datePicker');
							$dp.dpClose();
						}
				});
				return false;
			})
			.bind('dpClosed', function()
			{
				$('*').unbind('focus.datePicker');
			});
	}
/* END EVENTS */
	$("a[rel]", ".dataTable").overlay({
        expose: '#315B7C', 
        effect: 'apple',
		closeOnClick: false,
		onLoad: function(e) {
			// grab wrapper element inside content 
			var $overlay = this.getTrigger().attr("rel"), 
				$wrap = $($overlay + ' div.wrap'),
				$url = this.getTrigger().attr("href");
				
			resizeShadow();
			
		},
        onBeforeLoad: function(e) {
			// grab wrapper element inside content 
			var $overlay = this.getTrigger().attr("rel"), 
				$wrap = $($overlay + ' div.wrap'),
				$url = this.getTrigger().attr("href");
				
			
			// load the page specified in the trigger 
			$wrap.html('<p><img src="../images/ajax-loader.gif" /></p><hr /><h2>Loading...</h2>');
			$.ajaxSettings.cache = false; //IE BugFix
			$wrap.load($url, function(response, status, xhr){
				if (status == "error") {
					var msg = "Sorry but there was an error: ";
					$wrap.html("<div class='error'><ul><li>" + msg + xhr.status + " " + xhr.statusText + "</li></ul></div>");
				}
			});
        }
    }); 	
    // form section help
    $("a[rel]", mainContent).overlay({
        expose: '#315B7C', 
        effect: 'apple',
        onLoad: function(e) {
            var $overlay = this.getTrigger().attr("rel"),
            	$wrap = $($overlay+' div.wrap');
				
			if ($wrap.html()) {
				//only attempt to scroll if there is content to scroll to!
				var $url = this.getTrigger().attr("href"),
					$myAnchor = $url.split('#')[1];
					
					if ($("div.wrap a[name="+$myAnchor+"]").size()) {
						var target_offset = $("div.wrap a[name="+$myAnchor+"]").position(),
						target_top = target_offset.top - 60;
	
						//goto that anchor by setting the body scroll top to anchor top
						$wrap.animate({scrollTop:target_top}, 500);
					}
			}
        },
        onBeforeLoad: function(e) {
            // grab wrapper element inside content 
            var $overlay = this.getTrigger().attr("rel"),
            	$wrap = $($overlay+' div.wrap'),
            	$url = this.getTrigger().attr("href");
            	
            // load the page specified in the trigger 
            $wrap.html('<p><img src="../images/ajax-loader.gif" /></p><hr /><h2>Loading help...</h2>');
            $.ajaxSettings.cache = false; //IE BugFix
			$wrap.load($url, function(response, status, xhr) {
				if (status == "error") {
					var msg = "Sorry but there was an error: ";
					$wrap.html("<div class='error'><ul><li>"+msg + xhr.status + " " + xhr.statusText + "</li></ul></div>");
				}
			});
        }
    }); 
	
	// tooltip handling
	$(".tip")
		.tooltip(
		{
			position:		'top center',
			tip: 			'.tooltip',
			offset:			[-7, 0],
			predelay:		300,
			delay:			150,
			effect:			'fade',
			fadeInSpeed:	200,
			fadeOutSpeed:	200
		})
		.dynamic(
		{
		});
	
	resizeShadow();
			
	// set focus on the first input field so the user can get started right away
	if(!$("form", mainContent).hasClass("noFirstFocus")) {
		$(":input:not('button'):visible:enabled:first", mainContent).focus();
	}
});

// retrieves the label for the given input field; can be used for chaining
jQuery.fn.getLabel = function()
{
	var $labels = $([]);
	$(this).each(function()
	{
		$labels = $labels.add($("label:not('.hideLabel')[for='" + $(this).attr("id") + "']", "#mainContent"));
	});
	return $labels;
}

// parses all of a trigger input's classes to get the identifier and index of any element(s) it affects
jQuery.fn.getElemFromClass = function()
{
	var targetClasses = $(this).attr("class");
	if(targetClasses)
	{
		targetClasses = targetClasses.split(' ');
		var target = new Array(1);
		target[0] = new Array();
		target[1] = new Array();
		$(targetClasses).each(function()
		{
			if(this.indexOf('-') >= 0)
			{
				var splitClass = this.split('-');
				target[0].push(splitClass[2]);
				target[1].push(splitClass[1]);
			}
		});
	}
	return target;
}
function getIdFromIndex(p_elementIndex, p_dynElements)
{
	var elementId = new Array();
	for(var i = 0; i < p_dynElements[0].length; i++)
	{
		if(p_elementIndex == p_dynElements[0][i])
			elementId.push(p_dynElements[1][i]);
	}
	return elementId;
}
function loopShowHide(p_elementIndex, p_dynElements)
{
	var selectedId = getIdFromIndex(p_elementIndex, p_dynElements);
	for(var i = 0; i < p_dynElements[0].length; i++)
	{
		var tagName = "#" + p_dynElements[1][i] + showIdSuffix,
			slideUp = $(selectedId).index(p_dynElements[1][i]) >= 0 ? false : true;
		$(tagName).showHideFields(slideUp);
	}
	
	return false;
}

// parses elements for show/hide, editable rows, and other dynamic actions; fired on load or when the user clicks anywhere on the page
jQuery.fn.parseElements = function()
{
	/* SELECTOR CONSTANTS */
	// these assist in minification
	var $this = $(this),	
		$parent = $this.parent(),
		$parentFieldset = $this.parents(fieldset),
		$parentRow = $this.closest("tr"),
		mainContent = "#mainContent",
		fieldset = "fieldset",
		required = "required",
		hideRequired = "hideRequired",
		validateGroup = ".validateGroup",
		showDetail = "showDetail",
		hideDetail = "hideDetail",
		hasDetail = "hasDetail",
		emphasizeRow = "emphasizeRow",
		editable = "editable",
		$firstBox = $parent.prev("select[multiple]"),
		$secondBox = $parent.next("select[multiple]");
	
	// show hidden required field icons in optional fieldsets when the user clicks on an input (for checkboxes and radios)
	if($parentFieldset.hasClass(hideRequired) && $this.val()[0])
		$parentFieldset
			.removeClass(hideRequired)
			.find("img[src$='icon_required.gif']:hidden")
			.css("display","inline");
	switch(true)
	{		
		// client-side validation
		case $this.is("button[type='submit']:not('#prevBtn,.noValidate,.ajaxSave,.ajaxSearch,.fancySubmit')"):
			// Struts needs the submit button name
			var submitName = $this.attr("name") ? $this.attr("name") : "NAME";
			if(submitName != undefined) {
				var submitId = "submitBtnName";
				var submitElement = document.getElementById(submitId);
				if(submitElement) {
					submitElement.name = submitName;
				} else {
					$this
						.closest("form")
						.prepend('<input type="hidden" id="' + submitId 
								+ '" name="' + submitName + '" value="..." />');
				}
			}
			
			// if we're only validating one section, strip the required tags off everything else, validate the form, and then add them back
			var $formToValidate  = $("form", mainContent);
			if($this.closest(validateGroup)[0]) {
				var $elemValidate = $this
						.closest(validateGroup)
						.find(":input");
					$elemNoValidate = $(":input." + required)
						.not($elemValidate)
						.removeClass(required);
						
				var $validator = $formToValidate.bind("invalid-form.validate", function() {
					$("#validationError").remove();
					$(".formSection:first").before('<div id="validationError" class="errorDiv"><ul><li>Your form contains ' + $validator.numberOfInvalids() + ' errors, see details below.</li></ul></div>');
				}).validate({
					invalidHandler: function()
					{
						$elemNoValidate.addClass(required);
					}
				});
			} else {
				var $validator = $formToValidate.bind("invalid-form.validate", function() {
					$("#validationError").remove();
					$(".formSection:first").before('<div id="validationError" class="errorDiv"><ul><li>Your form contains ' + $validator.numberOfInvalids() + ' errors, see details below.</li></ul></div>');
				}).validate();
			}
			
			$isValid = $formToValidate.valid();
			if (!$isValid) {
				var $firstError = $(".error:first", mainContent).find(":input:first");
				$offset = $firstError.offsetTop();
				$("html").animate({scrollTop:$offset-50},{easing:"swing",duration:1800,complete:function(){$firstError.focus()} }); //add 50px to offset so the input isn't at the top of the window
			}
			break;
		// text scaling buttons
		case $parent.is("#increaseFont, #decreaseFont"):
			var currentFontSize = $scalableText.css('font-size'),
				newFontSize = parseFloat(currentFontSize, 10);	
			newFontSize = $parent.attr("id") == "increaseFont" ? newFontSize + 3 : newFontSize - 3;	
			$scalableText.css('font-size', newFontSize);
			resizeShadow();
			break;
			
		// collapsable elements header bar
		case $this.is(fieldset + " h6"):
			$this
				.toggleClass("collapsed")
				.next("div, " + fieldset)
				.slideToggle("medium",function()
				{
					resizeShadow();
				});	
			break;
			
		// show/hide event for dynamic form elements
		case $this.is("select." + showDetail):
			// get the index of the option the user selected
			var selectedIndex = $this.children("option").index($this.children("option:selected")),
				dynElements = $this.getElemFromClass();
			loopShowHide(selectedIndex, dynElements);
			break;
		case $this.is("." + showDetail + " :radio:checked"):
			var $setParent = $this.closest("." + showDetail),
				dynElements = $setParent.getElemFromClass(),
				// get the index of the selected radio button from all the radios in the set
				selectedIndex = $setParent.find(":radio").index(this);
			loopShowHide(selectedIndex, dynElements);
			break;
		case $this.is(":checkbox." + showDetail):
			var	dynElements = $this.getElemFromClass(),
				tagName = "#" + dynElements[1] + showIdSuffix;
			// if the user unchecked the box, make sure there aren't any other checkboxes assigned to show the same hidden fields
			var slideDir = !$(":checkbox.show-" + dynElements[1], mainContent).is(":checked") ? 1 : 0;
			$(tagName).showHideFields(slideDir);
			break;
		case $this.is(":checkbox." + hideDetail):
			var	dynElements = $this.getElemFromClass(),
				tagName = "#" + dynElements[1] + showIdSuffix;
			// if the user unchecked the box, make sure there aren't any other checkboxes assigned to show the same hidden fields
			var slideDir = $(this).is(":checked") ? 1 : 0;
			$(tagName).showHideFields(slideDir);
			break;
		case $(this).closest("tr." + showDetail)[0] && $this.is(":not(a)"):
			var $setParent = $this.closest("tr"),
				dynElements = $setParent.getElemFromClass();
			if($setParent.next("tr.rowDetails").find("div").is(":visible"))
				var slideDir = 1;

			var tagName = "#" + dynElements[1] + showIdSuffix;
			$(tagName).showHideFields(slideDir);
			break;
			
		case $this.hasClass("fieldIcon"):
			// if the user clicks on the calendar icon, show the calendar and focus on the date field
			$this.prev("input")
				.filter(".dateInput")
				.focus()
				.dpDisplay();
			break;

		// clickable table rows
		case $parentRow.hasClass("clickable"):
			var $link = $parentRow.find("a:first");
			// row contains a link
			if($link[0])
				window.location = $link.attr("href");
			// row contains a radio button
			else
				$parentRow.find(":radio:first").attr("checked","checked");
			break;
			
		// editable table rows
		case $parentRow.hasClass(editable):
			// if another row is already being edited, don't let them click a new one
			if(!$parentRow.hasClass("dimmed") )
			{
				// mark the target row so we don't hide its icons
				$parentRow
					.removeClass(editable)
					.children("td:first")
					.html($("#formLegend ul img[src$='table_edit.png']").clone());
				$parentRow
					// highlight the new editing row
					.addClass(emphasizeRow)
					// hide the static text
					.find("span")
					.hide();
				$parentRow
					// show the hidden input
					.find(":input")
					.show();
				// dim all the other rows so the user won't try to click on them
				$parentRow
					.siblings("tr." + editable + ", tr.edited, tr.deleted")
					.removeClass("odd even")
					.addClass("dimmed")
					.find("img.fieldIcon:visible")
					.hide();
							
				var editBtns = "<tr class='editBtns'><td colspan='" + $parentRow.children("td").length + "'><div class='roundedBottom'></div></td></tr>";
				// does the row have a detail drop-down?
				if($parentRow.hasClass(hasDetail))
				{
					var $detailTrigger = $parentRow.find(":input." + showDetail),
						$detailRow = $parentRow.next("tr.rowDetails"),
						$detailChildren = $detailRow.children("td");
					var dynElements = $detailTrigger[0] ? $detailTrigger.getElemFromClass() : $parentRow.getElemFromClass();
					var detailID = "#" + dynElements[1] + showIdSuffix;
					// if the row doesn't exist, make it
					if(!$detailChildren.html())
						$detailChildren.html($(detailID));
					if($detailTrigger.is(":checked") || !$detailTrigger[0])
						$parentRow
							.next("tr")
							.find(detailID)
							.showHideFields();
					else
						$parentRow
							.next("tr")
							.find(detailID)
							.hide();
					$detailRow.after(editBtns);
				}
				else
					$parentRow.after(editBtns);
				
				var $updateRowID = "update",
					$deleteRowID = "delete";
				if ($parentRow.attr('id')) {
					$updateRowID += "-" + $parentRow.attr('id');
					$deleteRowID += "-" + $parentRow.attr('id');
				}
				
				if ($parentRow.hasClass("readonly")) {
					$parentRow
						.siblings("tr.editBtns")
						.find("div")
						.html('<button type="button" class="submitBtn rowCancel">Close</button>');	
					
				} else {
					$parentRow
						.siblings("tr.editBtns")
						.find("div")
						.html('<button type="button" class="rowUpdate submitBtn" id="'+ $updateRowID + '">Update</button><button type="button" class="rowCancel">Cancel</button><button type="button" class="rowDelete" id="'+ $deleteRowID + '">Delete</button>');	
				}
					
				resizeShadow();
			}
			break;
		case $this.is("button.boxUpdate"):
			var $parentFormAction = $this.closest("form").attr("action");
			var $parent = $this.closest("fieldset");
			//$($parent).find("<h6>").find("img").attr("src","UPDATE");
			submitAjaxData('update',$parentFormAction,$parent);
			break;
		case $this.is("button.fancySubmit"):
			var old_button = $this.html(); //save old button content
			
			$valid = $("form", mainContent).valid();
			if ($valid) {
				$this.html('Please wait...');
				$this.attr("disabled",true);
				$this.parent().prepend('<div class="info"><h1>Please wait...</h1><img style="float:left;padding:10px" src="http://sandbox.nctracks.com/mockups/images/ajax-loader.gif" alt="loading..." /><h2>We are processing your request.</h2><p>Please do not close your browser or reload the page.</p></div>');
				$this.closest("form").submit();
			} else {
				$this.html(old_button);
				$this.attr("disabled",false);
			}
			
			break;
		case $this.is("button.ajaxSave"):
			logData("ajaxSave",$this);
			var $parentFormAction = $this.closest("form").attr("action");
			logData("got parentFormAction",$parentFormAction);
			var $parent = $this.closest("form");
			logData("got parent",$parent);
			submitAjaxData('save',$parentFormAction,$parent);
			logData("submitAjaxData",1);
			break;
		case $this.is("button.boxDelete"):
			var $parentFormAction = $this.closest("form").attr("action");
			var $parent = $this.closest("fieldset");
			submitAjaxData('delete',$parentFormAction,$parent);
			break;
		case $this.is("button.rowUpdate"):
			var $parentFormAction = $this.closest("form").attr("action"),
				$parentRow = $parentRow.prevAll("tr." + emphasizeRow);
			$parentRow
				// add edited color and icon
				.addClass("edited")
				.removeClass(emphasizeRow)
				.find("td:first")
				.html($("#formLegend ul img[src$='pencil.png']").clone());
			$parentRow	
				// convert the edited row back to static
				.find("span")
				.show();
			$parentRow
				.find(":input")
				.hide();

			$this.closest("tr.editBtns").remove();
			if($parentRow.is("." + hasDetail + ", ." + showDetail))
			{
				var $detailRow = $parentRow.next("tr.rowDetails");
				$detailRow.find("div:first").showHideFields(1);
			}
			// remove dimming and show icons
			$parentRow.siblings("tr.dimmed").removeClass("dimmed");
			$parentRow
				.siblings("tr." + editable + ", tr.edited, tr.deleted")
				.find("img.fieldIcon[src$='audit.png']")
				.show();
			$parentRow.find(":input.dateInput + img.fieldIcon").hide();
			
			// restore zebra-striping
			$evenRows.addClass("even");
			$oddRows.addClass("odd");		
			break;
		/*
		case $this.is("button.rowNewUpdate"):
			var $parentFormAction = $this.closest("form").attr("action"),
				$parentRow = $parentRow.prevAll("tr." + emphasizeRow),
				$details = null;
				
				if ( $parentRow.attr("id") ) {
					$details = $("#"+$parentRow.attr("id")+"-details");
				}
				
			$parentRow
				// add edited color and icon
				.addClass("edited")
				.removeClass(emphasizeRow)
				.find("td:first")
				.html($("#formLegend ul img[src$='pencil.png']").clone());
			$parentRow	
				// convert the edited row back to static
				.find("span")
				.show();
			$parentRow
				.find(":input")
				.hide();

			$this.closest("tr.editBtns").remove();
			if($parentRow.is("." + hasDetail + ", ." + showDetail))
			{
				var $detailRow = $parentRow.next("tr.rowDetails");
				$detailRow.find("div:first").showHideFields(1);
			}
			// remove dimming and show icons
			$parentRow.siblings("tr.dimmed").removeClass("dimmed");
			$parentRow
				.siblings("tr." + editable + ", tr.edited, tr.deleted")
				.find("img.fieldIcon[src$='audit.png']")
				.show();
			$parentRow.find(":input.dateInput + img.fieldIcon").hide();
			
			// restore zebra-striping
			$evenRows.addClass("even");
			$oddRows.addClass("odd");		


			var parameters = new Object();
				parameters.parentFormAction = $parentFormAction;
				parameters.updatableObj = $parentRow;
				parameters.details = $details;
				//console.log(parameters);

			doAjaxRowUpdate(parameters);
			resizeShadow();
			break;
			*/
		case $this.is("button.rowCancel"):
			$parentRow = $parentRow.prevAll("tr." + emphasizeRow);
			// convert the edited row back to static
			$parentRow
				.removeClass(emphasizeRow)
				.find("td:first")
				.empty();
			$parentRow.find("span").show();
			$parentRow.find(":input").hide();
			$this.closest("tr.editBtns").remove();
			if($parentRow.is("." + hasDetail + ", ." + showDetail))
			{
				var $detailRow = $parentRow.next("tr.rowDetails");
				$detailRow.find("div:first").showHideFields(1);
			}
			// remove dimming and show icons
			$parentRow.siblings("tr.dimmed").removeClass("dimmed");
			$parentRow
				.siblings("tr." + editable + ", tr.edited, tr.deleted")
				.find("img.fieldIcon[src$='audit.png']")
				.show();
			// restore zebra-striping
			$evenRows.addClass("even");
			$oddRows.addClass("odd");
			$parentRow.addClass(editable);
			resizeShadow();
			break;
		case $this.is("button.rowDelete"):
			/*
			<script>
				useLocalDelete = true;
			</script>
			for .Net apps*/
			if (!window.useLocalDelete) {
				var $parentFormAction = $this.closest("form").attr("action");
				var $confirmDelete = confirm("Delete row?");
				if ($confirmDelete)
				{
					//need to put confirmation dialog here
					$parentRow = $parentRow.prevAll("tr." + emphasizeRow);
					// add deleted color and icon
					$parentRow
						.addClass("deleted")
						.removeClass(emphasizeRow)
						.find("td:first")
						.html($("#formLegend ul img[src$='delete.png']")
						.clone());
					// convert the edited row back to static
					$parentRow.find("span").show();
					$parentRow.find(":input").hide();
					$this.closest("tr.editBtns").remove();
					if($parentRow.is("." + hasDetail + ", ." + showDetail))
					{
						var $detailRow = $parentRow.next("tr.rowDetails");
						$detailRow.find("div:first").showHideFields(1);
					}
					// remove dimming and show icons
					$parentRow.siblings("tr.dimmed").removeClass("dimmed");
					$parentRow.siblings("tr." + editable + ", tr.edited, tr.deleted").find("img.fieldIcon[src$='audit.png']").show();
					$parentRow.find(":input.dateInput + img.fieldIcon").hide();
		
					// restore zebra-striping
					$evenRows.addClass("even");
					$oddRows.addClass("odd");
					
					submitAjaxData('delete',$parentFormAction,$parentRow);
				}
			}
			resizeShadow();
			break;
		
			
		// inputs that disable other inputs
		case $this.hasClass("disable"):
			var disableID = $(this).getElemFromClass(),
				$tagName = $("#" + disableID[1]);
			if($this.is(":checked"))
				$tagName
					.attr("readonly","readonly")
					.addClass("disabled");
			else
				$tagName
					.removeAttr("readonly")
					.removeClass("disabled");
			break;

		// cross-select buttons
		case $this.hasClass("crossAdd"):
			$secondBox
				.append($firstBox.find("option:selected"))
				// when the select boxes change, they need to be resorted in alphabetical order
				.html($secondBox.find("option").sort(sortAlpha));
			break;
		case $this.hasClass("crossAddAll"):
			$secondBox
				.append($firstBox.find("option"))
				// when the select boxes change, they need to be resorted in alphabetical order
				.html($secondBox.find("option").sort(sortAlpha));
			break;
		case $this.hasClass("crossRemove"):
			$firstBox
				.append($secondBox.find("option:selected"))
				.html($firstBox.find("option").sort(sortAlpha));
			break;
		case $this.hasClass("crossRemoveAll"):
			$firstBox
				.append($secondBox.find("option"))
				.html($firstBox.find("option").sort(sortAlpha));
			break;
		case $this.is("button.rowAdd"):
			var $parentFormAction = $this.closest("form").attr("action");
			var $rowToAdd = $this.closest("form").find("tr.rowAdd");
			submitAjaxData('add',$parentFormAction,$rowToAdd);
			break;
		case $this.is("button.addBox"):
			var $parentFormAction = $this.closest("form").attr("action");
			var $parent = $this.closest("fieldset");
			submitAjaxData('add',$parentFormAction,$parent);
			break;
		case $this.is("button.linkBtn"):	
			window.location = $(this).find("a").attr("href");
			break;
		case $this.is("button.ajax"):
		case $this.is("button.ajaxSearch"):
			/**
			var isValid = $("form", mainContent).valid();
			console.log("isValid: " + isValid);
			**/
			isValid = true;
		
			if (isValid) {
				$('#searchResultsTable')
					.closest('fieldset')
					.removeClass('hidden')
					.show();
				var classAttrs = $this.attr('class'),
					tagNames = classAttrs.split(" "),
					tagName;
				$(tagNames).each(function() {
					if(this.indexOf('-') >= 0)
					{
						var splitClass = this.split('-');
						tagName = splitClass[1];
					}
				});

				var columnNames = "#" + tagName + " thead th";
			
				$(columnNames).each(function()
				{
					var colId = $(this).attr("id");
					dataColsArray.push( colId );
					$("#"+colId).show();
				});
				
				var jsonUrl = $(this).closest("form").attr("action"),
					jsonParameters = new Object();
				
				
				//loop thru all input elements in form, add name and value to jsonParameters
				$this
					.closest("form")
					.find(":checked")
					.each(function() {
						eval("jsonParameters."+this.name+"='"+$(this).val()+"'");
					})
					.end()
					.find("select, :text")
					.each(function() {
						eval("jsonParameters."+this.name+"='"+$(this).val()+"'");
					});
				
				doAjaxSearch(tagName, jsonUrl, jsonParameters);
			}
			break;
		case $this.is(":checkbox#noSSN"):
			//Goal: if "no ssn" is selected, set the value to 000-00-0000 and turn the color white to "hide"
			//it. This allows the field to pass validation.
			$ssn = $parent.parent().find("input[type='text'].ssn");
			if ($this.is(":checked")) {
				$ssn.val("000-00-0000").attr("disabled", true).css({"color":"white"});
			} else {
				$ssn.val("").removeAttr("disabled").css({"color":"black"});
			}
			break;
		}
}

jQuery.fn.showHideFields = function(p_hide)
{
	var $this = $(this);
	if(p_hide & $this.is(":visible"))
		$this
			.addClass("hidden")
			.slideUp("fast",function()
			{
				// hide any containing detail table rows
				$this
					.parents()
					.prev("tr.showDetail, tr.hasDetail")
					.next("tr.rowDetails")
					.hide();
				resizeShadow();
			});
	else if(!p_hide)
	{
		$this.removeClass("hidden");
		// don't show something that's already shown
		if(!$this.is(":visible"))
		{
			// if the fields are inside a hidden table row, show it
			$this.parents("tr.rowDetails").show();
			$this.slideDown("fast",function()
			{
				resizeShadow();
			});
		}
	}
}

// recalculates the height of the drop shadow DIV based on the height of the content container
// called whenever the user does something that changes the height of the page
function resizeShadow()
{
	var shadowHeight = $("#tileBtm").offset().top - $("#dropShadowBox div.dropShadow").offset().top;
	$("#tileLeft, #tileRight").height(shadowHeight);
}

// performs alphabetical sorting via the sort() method
function sortAlpha(a,b)
{
	return a.innerHTML > b.innerHTML ? 1 : -1;
}

function isDate(p_dtStr)
{
	Date.format = "mm/dd/yyyy";
	var dtCh = "/",
		today = new Date(),
		inputDate = Date.fromString(p_dtStr),
		minYear = today.getFullYear() - 150,
		maxYear = today.getFullYear() + 150,
		pos1 = p_dtStr.indexOf(dtCh),
		pos2 = p_dtStr.indexOf(dtCh, pos1 + 1),
		month = p_dtStr.substring(0, pos1),
		day = p_dtStr.substring(pos1 + 1, pos2),
		year = p_dtStr.substring(pos2 + 1);
	
	if(!inputDate)
		return false;
	else
	{
		if(month < 1 || month > 12)
		{
			dateErrMsg="Please enter a valid month.";
			return false;
		}
		if(day < 1 || day > inputDate.getDaysInMonth())
		{
			dateErrMsg="Please enter a valid day.";
			return false;
		}
		if(year < minYear || year > maxYear)
		{
			dateErrMsg="Please enter a valid year between " + minYear + " and " + maxYear + ".";
			return false;
		}
		return true;
	}
}

function getParentType(element) {
	return $(element).parent().get(0).tagName; 
}

function checkOptional(value) {
	return (value == "dependency-mismatch");
	//hack around bug with empty fields that we want to validate the "possible content"
	//an empty field where were are checking
	//http://plugins.jquery.com/node/12703
}

jQuery.fn.offsetTop = function() {
	var e = this.get(0);
	if(!e.offsetParent) return e.offsetTop;
	return e.offsetTop + $(e.offsetParent).offsetTop();
};

jQuery.fn.addRequired = function( ) {
	$(this).attr("disabled", false); 
	var requiredIcon = "requiredIcon",
		$icon = $("#requiredLegend img")
		.addClass(requiredIcon)
		.clone();
		
	$(this).removeRequired();
	$(this).getLabel().before($icon);
};

jQuery.fn.removeRequired = function( parameters ) {
	if (parameters) {
		if (parameters.disable) {
			$(this).attr("disabled", true); 
		}
	}
	$(this).getLabel().parent().find("img.requiredIcon").remove();
};

jQuery.fn.calculate = function(parameters)
{
	var method = parameters.method;
	var tagClass = parameters.tagClass;
	var totalTarget = "#"+parameters.totalTarget;
	
	switch(method) {		
		case "add":
			var total = 0; //default total to 0
			$("input."+tagClass).each( function() { 
				var value = 0; //default this elements value to 0
				if ($(this).val()) { value = $(this).val(); }
				total += parseInt(value);
			});
			$(totalTarget).val(total);
		break;
		case "subtract":
			var values = new Array();
			$("input."+tagClass).each( function() {
				var value = 0; //default this elements value to 0
				if ($(this).val()) { value = $(this).val(); }
				
				values.push(value);
			});
			
			values.sort( function(a,b) {return b - a} );
			
			var total = Math.max.apply( Math, values ); //default total to the max value
			values.splice(0,1); //remove the max value
			$(values).each( function() {
				total -= parseInt(this);
			});
			
			$(totalTarget).val(total);
		break;
	}
}

jQuery.fn.caps = function(cb){
	if(jQuery.browser.safari) return;
    return this.keypress(function(e){
        var w = e.which ? e.which : (e.keyCode ? e.keyCode : -1);
        var s = e.shiftKey ? e.shiftKey : (e.modifiers ? !!(e.modifiers & 4) : false);
        var c = ((w >= 65 && w <= 90) && !s) || ((w >= 97 && w <= 122) && s);
        cb.call(this, c);
    });
};